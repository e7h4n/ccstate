import { expect, test, vi } from 'vitest';
import { command, computed, state } from '../signal/factory';
import { createStore } from '../store/store';
import { delay } from 'signal-timers';

/* 
WIP

This case will produce two unhandled rejections
The first one is the evaluation of promise$ when store.sub is called
The second one is the second promise generated by promise$ when store.set is called
The second one can be resolved by getting promise$ in the sub callback and then catching it
The first one has no chance to be handled, it can only be dealt with in the framework
 */
test('sub to a async computed will rise unhandled rejection', async () => {
  const trace = vi.fn();
  process.on('unhandledRejection', (err) => {
    trace(err);
  });

  const reload$ = state(0);
  let count = 0;
  const promise$ = computed((get) => {
    get(reload$);
    return Promise.resolve().then(() => {
      throw new Error(`test error ${String(count++)}`);
    });
  });

  const store = createStore();
  store.sub(
    promise$,
    command(() => void 0),
  );

  store.set(reload$, (x) => x + 1);

  await delay(0);

  // WIP: this should be 0
  expect(trace).toHaveBeenCalledTimes(2);
});
